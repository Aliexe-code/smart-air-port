{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "operationId": "HealthController_testApp",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/users/all": {
      "get": {
        "operationId": "UsersController_getAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/register": {
      "post": {
        "operationId": "UsersController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/verify-email": {
      "post": {
        "operationId": "UsersController_verifyEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/resend-verification": {
      "post": {
        "operationId": "UsersController_resendVerificationEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailVerificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/refresh-token": {
      "post": {
        "operationId": "UsersController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/login": {
      "post": {
        "operationId": "UsersController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/change-password": {
      "put": {
        "operationId": "UsersController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/request-password-reset": {
      "post": {
        "operationId": "UsersController_requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/reset-password": {
      "post": {
        "operationId": "UsersController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/logout": {
      "post": {
        "operationId": "UsersController_logout",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{email}": {
      "delete": {
        "operationId": "UsersController_deleteUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/admin-dashboard": {
      "get": {
        "operationId": "UsersController_getAdminDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/flight-management": {
      "get": {
        "operationId": "UsersController_manageFlights",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/roles": {
      "patch": {
        "operationId": "UsersController_updateRoles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRolesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/flights/search/available": {
      "get": {
        "operationId": "FlightController_searchAvailableFlights",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Flights"
        ]
      }
    },
    "/flights/{flightId}/seatmap": {
      "get": {
        "operationId": "FlightController_getSeatMap",
        "parameters": [
          {
            "name": "flightId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Flights"
        ]
      }
    },
    "/booking": {
      "post": {
        "description": "Creates a new booking for the authenticated user. Requires flight details, seat selections, payment provider, and an idempotency key to prevent duplicates. Sends an email notification upon success.",
        "operationId": "BookingController_createBooking",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingDto"
              },
              "examples": {
                "example1": {
                  "summary": "Create Booking Example",
                  "value": {
                    "flightId": "67bd1121eb2ea3cd9bb865bf",
                    "seats": [
                      {
                        "seatNumber": "B2",
                        "class": "economy",
                        "price": 100
                      }
                    ],
                    "paymentProvider": "stripe",
                    "idempotencyKey": "d1244128-122b-11ee-be56-024123120002"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error (e.g., missing idempotency key)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "success": false,
                  "message": "Idempotency key is required",
                  "error": "Validation Failed",
                  "statusCode": 400
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "message": "Internal error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new booking",
        "tags": [
          "Bookings"
        ]
      },
      "get": {
        "description": "Retrieve a paginated list of bookings with optional filters",
        "operationId": "BookingController_getBookings",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Booking status filter",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "confirmed",
                "cancelled",
                "expired",
                "failed"
              ]
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "User ID to filter bookings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Start date for booking search range (ISO format)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "End date for booking search range (ISO format)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort results by",
            "schema": {
              "default": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "status",
                "totalPrice"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order (-1 for descending, 1 for ascending)",
            "schema": {
              "default": -1,
              "type": "number",
              "enum": [
                1,
                -1
              ]
            }
          },
          {
            "description": "Page number for pagination",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "description": "Number of items per page",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "description": "Booking status filter",
            "required": false,
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User ID to filter bookings",
            "required": false,
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start date for booking search range (ISO format)",
            "required": false,
            "name": "fromDate",
            "in": "query",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "End date for booking search range (ISO format)",
            "required": false,
            "name": "toDate",
            "in": "query",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "description": "Field to sort results by",
            "required": false,
            "name": "sortBy",
            "in": "query",
            "schema": {
              "default": "createdAt",
              "type": "string"
            }
          },
          {
            "description": "Sort order (-1 for descending, 1 for ascending)",
            "required": false,
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "default": -1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBookingsResponseDto"
                }
              }
            }
          }
        },
        "summary": "List bookings with pagination and filtering",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/booking/{id}/status": {
      "get": {
        "description": "Retrieves the status of a booking by its ID.",
        "operationId": "BookingController_getBookingStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Booking ID",
            "schema": {
              "example": "67be8671461b2609214e658b",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking status retrieved successfully",
            "content": {
              "application/json": {
                "example": {
                  "success": true,
                  "status": "pending"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "statusCode": 404,
                  "message": "Booking not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get booking status",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/booking/confirm/{bookingId}": {
      "post": {
        "description": "Confirms a booking for the authenticated user by its ID. Sends a confirmation email upon success.",
        "operationId": "BookingController_confirmBooking",
        "parameters": [
          {
            "name": "bookingId",
            "required": true,
            "in": "path",
            "description": "Booking ID to confirm",
            "schema": {
              "example": "67be8671461b2609214e658b",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Booking confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "statusCode": 404,
                  "message": "Booking not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm a booking",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/booking/my-bookings": {
      "get": {
        "description": "Retrieve a paginated list of the authenticated user's bookings",
        "operationId": "BookingController_getMyBookings",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Booking status filter",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "confirmed",
                "cancelled",
                "expired",
                "failed"
              ]
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "User ID to filter bookings",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "Start date for booking search range (ISO format)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "End date for booking search range (ISO format)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort results by",
            "schema": {
              "default": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "status",
                "totalPrice"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order (-1 for descending, 1 for ascending)",
            "schema": {
              "default": -1,
              "type": "number",
              "enum": [
                1,
                -1
              ]
            }
          },
          {
            "description": "Page number for pagination",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "description": "Number of items per page",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "description": "Booking status filter",
            "required": false,
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User ID to filter bookings",
            "required": false,
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start date for booking search range (ISO format)",
            "required": false,
            "name": "fromDate",
            "in": "query",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "End date for booking search range (ISO format)",
            "required": false,
            "name": "toDate",
            "in": "query",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "description": "Field to sort results by",
            "required": false,
            "name": "sortBy",
            "in": "query",
            "schema": {
              "default": "createdAt",
              "type": "string"
            }
          },
          {
            "description": "Sort order (-1 for descending, 1 for ascending)",
            "required": false,
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "default": -1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBookingsResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List current user's bookings",
        "tags": [
          "Bookings"
        ]
      }
    },
    "/payment/webhook": {
      "post": {
        "description": "Receives and processes Stripe webhook events. Rate-limited to 10 requests per minute.",
        "operationId": "PaymentController_handleWebhook",
        "parameters": [
          {
            "name": "stripe-signature",
            "required": true,
            "in": "header",
            "description": "Stripe signature for verifying the webhook event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Raw webhook event data from Stripe (typically a JSON buffer)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "example1": {
                  "summary": "Payment Intent Succeeded Event",
                  "value": {
                    "id": "evt_1NxyzStripeEvent",
                    "object": "event",
                    "type": "payment_intent.succeeded",
                    "data": {
                      "object": {
                        "id": "pi_3NxyzStripePaymentIntent",
                        "amount": 1000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "description": "Invalid webhook signature or event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "statusCode": 400,
                  "message": "Invalid Stripe signature"
                }
              }
            }
          }
        },
        "summary": "Handle Stripe webhook events",
        "tags": [
          "Payments"
        ]
      }
    },
    "/payment/confirm/{paymentIntentId}": {
      "post": {
        "description": "Confirms a payment using the payment intent ID and updates the associated booking status.",
        "operationId": "PaymentController_confirmIntentPayment",
        "parameters": [
          {
            "name": "paymentIntentId",
            "required": true,
            "in": "path",
            "description": "Stripe payment intent ID",
            "schema": {
              "example": "pi_3NxyzStripePaymentIntent",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentDto"
              },
              "examples": {
                "example1": {
                  "summary": "Confirm Payment Example",
                  "value": {
                    "expectedAmount": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentConfirmationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payment intent or amount mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "statusCode": 400,
                  "message": "Invalid payment intent"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpException"
                },
                "example": {
                  "statusCode": 404,
                  "message": "Booking not found"
                }
              }
            }
          }
        },
        "summary": "Confirm a payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/payment/confirm": {
      "post": {
        "description": "Confirms payment for a booking and updates its status",
        "operationId": "PaymentController_confirmPayment",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentConfirmationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payment method or booking state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingErrorResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Payment already processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Confirm payment for a booking",
        "tags": [
          "Payments"
        ]
      }
    },
    "/notification": {
      "get": {
        "operationId": "NotificationController_getNotifications",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Notification"
        ]
      }
    },
    "/notification/count": {
      "get": {
        "operationId": "NotificationController_getNotificationCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Notification"
        ]
      }
    }
  },
  "info": {
    "title": "Smart Airport API",
    "description": "API documentation for the Smart Airport application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "Passsssword12@@"
          },
          "firstName": {
            "type": "string",
            "example": "Ahmed"
          },
          "lastName": {
            "type": "string",
            "example": "MMM"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+201234567890"
          },
          "country": {
            "type": "string",
            "example": "Egypt"
          },
          "birthdate": {
            "type": "string",
            "example": "1990-01-01"
          }
        },
        "required": [
          "email",
          "password",
          "firstName",
          "lastName",
          "country",
          "birthdate"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "test@example.com",
            "description": "User email address"
          },
          "code": {
            "type": "string",
            "example": "A1B2C3",
            "description": "Verification code"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "ResendEmailVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user1@example.com",
            "description": "Email of the user to resend verification"
          }
        },
        "required": [
          "email"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "example": "your-refresh-token-here",
            "description": "Refresh token to obtain a new access token"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "LoginUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "example": "Password123!",
            "description": "User password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "example": "OldPasssssword12@@"
          },
          "newPassword": {
            "type": "string",
            "example": "NewPasssssword12@@"
          }
        },
        "required": [
          "oldPassword",
          "newPassword"
        ]
      },
      "RequestResetPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user1@example.com",
            "description": "Email of the user to request password reset"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "ABC12"
          },
          "newPassword": {
            "type": "string",
            "example": "NewPasssssword12@@"
          }
        },
        "required": [
          "code",
          "newPassword"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateUserRolesDto": {
        "type": "object",
        "properties": {}
      },
      "SeatSelectionDto": {
        "type": "object",
        "properties": {
          "seatNumber": {
            "type": "string",
            "example": "B2",
            "description": "Seat number (e.g., A1, B2)"
          },
          "class": {
            "type": "string",
            "example": "economy",
            "enum": [
              "economy",
              "premium_economy",
              "business",
              "first"
            ],
            "description": "Class of the seat"
          },
          "price": {
            "type": "number",
            "example": 100,
            "description": "Price of the seat in currency units"
          }
        },
        "required": [
          "seatNumber",
          "class",
          "price"
        ]
      },
      "CreateBookingDto": {
        "type": "object",
        "properties": {
          "seats": {
            "description": "Array of selected seats",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatSelectionDto"
            }
          },
          "flightId": {
            "type": "string",
            "example": "67bd1121eb2ea3cd9bb865bf",
            "description": "MongoDB ID of the flight"
          },
          "paymentProvider": {
            "type": "string",
            "example": "stripe",
            "enum": [
              "stripe",
              "paypal",
              "mobile_wallet"
            ],
            "description": "Payment provider for the booking"
          },
          "idempotencyKey": {
            "type": "string",
            "example": "d1244128-122b-11ee-be56-024123120002",
            "description": "Unique key to prevent duplicate bookings"
          }
        },
        "required": [
          "seats",
          "flightId",
          "paymentProvider",
          "idempotencyKey"
        ]
      },
      "SeatResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "67be8671461b2609214e658c"
          },
          "seatNumber": {
            "type": "string",
            "example": "B2"
          },
          "class": {
            "type": "string",
            "example": "economy"
          },
          "price": {
            "type": "number",
            "example": 100
          }
        },
        "required": [
          "_id",
          "seatNumber",
          "class",
          "price"
        ]
      },
      "BookingResponseDto": {
        "type": "object",
        "properties": {
          "bookingRef": {
            "type": "string",
            "example": "SMAIR-20250418-XYZ123",
            "description": "User-friendly booking reference code"
          },
          "_id": {
            "type": "string",
            "example": "67be8671461b2609214e658b"
          },
          "user": {
            "type": "string",
            "example": "67be6d62391984265fc51a7f"
          },
          "flight": {
            "type": "string",
            "example": "67bd1121eb2ea3cd9bb865bf"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatResponseDto"
            }
          },
          "totalSeats": {
            "type": "number",
            "example": 1
          },
          "totalPrice": {
            "type": "number",
            "example": 100
          },
          "status": {
            "type": "string",
            "example": "pending"
          },
          "paymentProvider": {
            "type": "string",
            "example": "stripe"
          },
          "idempotencyKey": {
            "type": "string",
            "example": "d1244128-122b-11ee-be56-024123120002"
          },
          "paymentIntentId": {
            "type": "string",
            "example": "pi_3NxyzStripePaymentIntent"
          },
          "expiresAt": {
            "type": "string",
            "example": "2025-02-26T03:38:37.886Z"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-02-26T03:08:37.898Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-02-26T03:08:37.898Z"
          },
          "version": {
            "type": "number",
            "example": 0,
            "description": "Optimistic concurrency control version"
          }
        },
        "required": [
          "bookingRef",
          "_id",
          "user",
          "flight",
          "seats",
          "totalSeats",
          "totalPrice",
          "status",
          "paymentProvider",
          "idempotencyKey",
          "createdAt",
          "updatedAt",
          "version"
        ]
      },
      "HttpException": {
        "type": "object",
        "properties": {}
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total number of bookings that match the filter criteria",
            "example": 157
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "pages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 16
          }
        },
        "required": [
          "total",
          "page",
          "limit",
          "pages"
        ]
      },
      "PaginatedBookingsResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the result",
            "example": "Retrieved 10 bookings"
          },
          "data": {
            "description": "The booking data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "success",
          "message",
          "data",
          "meta"
        ]
      },
      "ConfirmPaymentDto": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "string",
            "description": "Booking ID",
            "example": "507f1f77bcf86cd799439011"
          },
          "paymentMethodId": {
            "type": "string",
            "description": "Stripe payment method ID",
            "example": "pm_card_visa"
          },
          "expectedAmount": {
            "type": "number",
            "description": "Expected amount in smallest currency unit (e.g. cents)",
            "example": 5000
          }
        },
        "required": [
          "bookingId",
          "paymentMethodId",
          "expectedAmount"
        ]
      },
      "PaymentConfirmationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Booking bkg_12345 confirmed successfully."
          },
          "data": {
            "type": "object",
            "example": {
              "booking": {
                "id": "bkg_12345",
                "status": "confirmed"
              },
              "receiptUrl": "https://stripe.com/receipt/abc123"
            }
          }
        },
        "required": [
          "success",
          "message",
          "data"
        ]
      },
      "BookingErrorResponseDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "message"
        ]
      },
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Validation failed",
            "description": "A human-readable error message"
          },
          "error": {
            "type": "string",
            "example": "Bad Request",
            "description": "HTTP error type"
          },
          "statusCode": {
            "type": "number",
            "example": 400,
            "description": "HTTP status code"
          },
          "timestamp": {
            "type": "string",
            "example": "2025-02-27T09:05:47.193Z",
            "description": "Timestamp of the error"
          },
          "path": {
            "type": "string",
            "example": "/users/register",
            "description": "Request path"
          },
          "errors": {
            "type": "object",
            "example": {
              "email": "Invalid email format"
            },
            "description": "Validation errors (when applicable)"
          }
        },
        "required": [
          "success",
          "message",
          "error",
          "statusCode",
          "timestamp",
          "path"
        ]
      }
    }
  }
}