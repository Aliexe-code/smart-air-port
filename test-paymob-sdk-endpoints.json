{
  "info": {
    "name": "Paymob SDK Integration Tests",
    "description": "Test collection for Paymob SDK endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "booking_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "payment_key",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Create Payment Key for SDK",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has required SDK fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('paymentKey');",
              "    pm.expect(jsonData).to.have.property('integrationId');",
              "    pm.expect(jsonData).to.have.property('orderId');",
              "    pm.expect(jsonData).to.have.property('amountCents');",
              "    pm.expect(jsonData).to.have.property('currency');",
              "    pm.expect(jsonData).to.have.property('expiresAt');",
              "    pm.expect(jsonData).to.have.property('merchantOrderId');",
              "});",
              "",
              "pm.test(\"Currency is EGP\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.currency).to.eql('EGP');",
              "});",
              "",
              "pm.test(\"Success is true\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});",
              "",
              "// Store payment key for subsequent tests",
              "if (pm.response.code === 201) {",
              "    var jsonData = pm.response.json();",
              "    pm.collectionVariables.set('payment_key', jsonData.paymentKey);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"bookingId\": \"{{booking_id}}\",\n  \"mobileNumber\": \"+201234567890\",\n  \"email\": \"test@example.com\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/payment/paymob/create-payment-key",
          "host": ["{{base_url}}"],
          "path": ["payment", "paymob", "create-payment-key"]
        }
      }
    },
    {
      "name": "2. Get Payment Status by Booking ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has payment status fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('paymentStatus');",
              "    pm.expect(jsonData).to.have.property('paymentKey');",
              "    pm.expect(jsonData).to.have.property('integrationId');",
              "    pm.expect(jsonData).to.have.property('orderId');",
              "    pm.expect(jsonData).to.have.property('amount');",
              "    pm.expect(jsonData).to.have.property('currency');",
              "});",
              "",
              "pm.test(\"Payment status is pending initially\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.paymentStatus).to.eql('pending');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{base_url}}/payment/paymob/status/{{booking_id}}",
          "host": ["{{base_url}}"],
          "path": ["payment", "paymob", "status", "{{booking_id}}"]
        }
      }
    },
    {
      "name": "3. Verify Payment (Simulate SDK Success)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has verification fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData).to.have.property('paymentStatus');",
              "    pm.expect(jsonData).to.have.property('amount');",
              "    pm.expect(jsonData).to.have.property('currency');",
              "    pm.expect(jsonData).to.have.property('metadata');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"bookingId\": \"{{booking_id}}\",\n  \"transactionId\": \"{{transaction_id}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/payment/paymob/verify-payment",
          "host": ["{{base_url}}"],
          "path": ["payment", "paymob", "verify-payment"]
        }
      }
    }
  ]
}
